package chatter

import (
	"encoding/json"
	"golang.org/x/net/websocket"
	"time"
	"fmt"
)

import (
	"rohandvivedi.com/src/session"
)

type chatUser struct {
	// name of the chat user client
	name string

	// the active web socket connection to the user
	connection *websocket.Conn

	// sender needs to write to this channel,
	// if the message is referred to: to the given user identified by the Name
	// the chat user's go rputing dedicated to the given user will read from the channel 
	// and writ the message to the connection
	inputMessage chan chatMessage

	// last message, received or sent or pinged
	// this lets us identify id the user went idle, for a long time say 5 mins
	// if so we close the connection
	lastMessage time.Time

	// public key, this is the public key for the user, and is generated by the user only
	// any time a user wants to connect to another person
	// the server hands over the PublicKey from one user to another
	publicKey string
}

func newChatUser(name string, connection *websocket.Conn, publicKey string) (*chatUser) {
	return &chatUser{name:name,connection:connection,inputMessage:make(chan chatMessage, 10),lastMessage:time.Now(),publicKey:publicKey}
}